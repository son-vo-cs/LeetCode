1) for count frequency of character, we could create a int[128] and then arry[char]++, don't have to convert anything

2) if we need to coung frequency of 2 arrays, why not use 1 hash map and count + and -

3) if our function(a,b) only works if a >b, then first line of function return (b,a) if a <b : https://leetcode.com/problems/intersection-of-two-arrays-ii/submissions/

4) BITS:
    flip bit = xor = a^1
    if we want to flip all bits=> flip ^ 1, then move 1 << 1, flip again
    Integer to string bit: Integer.toString(num,2)
    Integer count bit: Integer.bitCount(n)
    
5: DYNAMIC: if we cannot form an arrar dp[num], or dp[fromi][toj] => try think different way or not dp or greedy. And dynamic is a hard version of greedy


6: GREEDY
    if processing 2D array and we want to stop row or col whenever a condition is meet ->> better use 1 loop instead of 2 (r+c instead of r*c): https://leetcode.com/problems/find-valid-matrix-given-row-and-column-sums/
    a) two pointer, write out the formula, sometimes we decide to choose which direction based on the current pointers, not the next: https://leetcode.com/problems/container-with-most-water/

    PATTERN: find next smaller or greater val: https://leetcode.com/problems/final-prices-with-a-special-discount-in-a-shop/
    
    FIND K closet based on distance, why not compute and sort distance first, then calculate distance again: https://leetcode.com/problems/k-closest-points-to-origin/submissions/
    
7: IN PLACE
    if you want to work in place => 2 options: https://leetcode.com/problems/merge-sorted-array/
        1) move all the important data to the end of the array
        2) works backward
        
 
8: Binary search advance: search start and end: https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/submissions/
 
 
9: TREE
    3 ways to traverse: https://leetcode.com/problems/search-in-a-binary-search-tree/submissions/
    If search in BST, we can do iterativly without using stack: (same above)
    Invert binary tree: https://leetcode.com/problems/invert-binary-tree/submissions/
    
    When traver to get sum of each node 0|1, use bit wise instead of string: https://leetcode.com/problems/sum-of-root-to-leaf-binary-numbers/
